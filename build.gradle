plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
apply plugin: 'war'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // JSP 및 JSTL 의존성 추가
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper' // JSP 지원을 위한 Tomcat Embed
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0'
    //providedCompile 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'



    // Lombok 의존성 추가
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // Spring Boot Starter Data JPA 의존성 추가 (Spring Data JPA와 Hibernate를 자동으로 설정)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //mapstruct 의존성
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'



    // mysql 의존성 추가
    runtimeOnly 'mysql:mysql-connector-java:8.0.28'
    //cookie 관련
    implementation 'javax.servlet:javax.servlet-api:4.0.1'

    // Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // security 의존성
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.security:spring-security-taglibs'

    //oauth2 의존성
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

}



tasks.named('test') {
    useJUnitPlatform()
}

//querydsl 빌드 옵션 설정
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}
